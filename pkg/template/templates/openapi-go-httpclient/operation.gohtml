{{- /*gotype: github.com/primelib/primecodegen/pkg/openapi/openapigenerator.OperationEachTemplate*/ -}}
{{- template "header-singleline" }}

package {{ .Package }}

import (
    "context"
	"net/http"

    "{{ .Metadata.ArtifactId }}/pkgs/{{.Common.Packages.Models }}"
    "github.com/go-resty/resty/v2"
    "github.com/primelib/primecodegen-lib-go/requeststruct"
)

{{ $reqStructName := printf "%sRequest" (.Name) }}
type {{ $reqStructName }} struct {
{{- range .Operation.MutableHeaderParameter }}
	{{ .Name | toPropertyName }} {{ .Type.QualifiedDeclaration }} `headerParam:"style=simple,explode=false,name={{ .FieldName }}"` {{ if .Description }}// {{ .Description | commentSingleLine }}{{ end }}
{{- end }}
{{- range .Operation.MutablePathParameters }}
	{{ .Name | toPropertyName }} {{ .Type.QualifiedDeclaration }} `pathParam:"style=simple,explode=false,name={{ .FieldName }}"` {{ if .Description }}// {{ .Description | commentSingleLine }}{{ end }}
{{- end }}
{{- range .Operation.MutableQueryParameters }}
	{{ .Name | toPropertyName }} {{ .Type.QualifiedDeclaration }} `queryParam:"style=simple,explode=false,name={{ .FieldName }}"` {{ if .Description }}// {{ .Description | commentSingleLine }}{{ end }}
{{- end }}
{{- if .Operation.BodyParameter }}
    {{ .Operation.BodyParameter.Name | toPropertyName }} {{ .Operation.BodyParameter.Type.QualifiedDeclaration }} `bodyParam:""` {{ if .Operation.BodyParameter.Description }}// {{ .Operation.BodyParameter.Description | commentSingleLine }}{{ end }}
{{- end }}
}

type {{ .Name }}Response struct {
{{- if isNotEmpty .Operation.ReturnType.QualifiedDeclaration }}
	// Success response
    Result {{ .Operation.ReturnType.QualifiedDeclaration }}
{{- end }}
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// {{ .Operation.Name }}{{if .Operation.Description }} {{ .Operation.Description | commentSingleLine }}{{ end }}
{{- if .Operation.Documentation }}
//
{{- range $doc := .Operation.Documentation }}
// {{ $doc.Title }}: {{ $doc.URL }}
{{- end }}
{{- end }}
//
//meta:operation {{ .Operation.Method | upperCase }} {{ .Operation.Path }}
func {{ .Operation.Name | toFunctionName }}(client *resty.Client, ctx context.Context, req {{ .Operation.Name | toClassName }}Request) (*{{ .Operation.Name | toClassName }}Response, error) {
    r := client.R().SetContext(ctx)

    // process request parameters
    reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
{{- range .Operation.ImmutableHeaderParameter }}
	r.SetHeader("{{ .FieldName }}", "{{ .StaticValue }}")
{{- end }}
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
    if reqData.BodyParam != nil {
        r.SetBody(reqData.BodyParam)
    }
    {{- if isNotEmpty .Operation.ReturnType.QualifiedType }}
    {{- if .Operation.ReturnType.IsMap }}
    result := make({{ .Operation.ReturnType.QualifiedType }})
    {{- else if .Operation.ReturnType.IsArray }}
    var result {{ .Operation.ReturnType.QualifiedDeclaration }}
    {{- else }}
    result := new({{ .Operation.ReturnType.QualifiedType }})
    {{- end }}
    r.SetResult(result)
    {{- end }}

    // send the request
    resp, err := r.{{ .Operation.Method | toFunctionName }}("{{ .Operation.Path }}")
	if err != nil {
		return nil, err
	}

    return &{{ .Operation.Name | toClassName }}Response{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
        {{- if isNotEmpty .Operation.ReturnType.Name }}
        Result:      result,
        {{- end }}
	}, nil
}
