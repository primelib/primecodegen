{{- /*gotype: github.com/primelib/primecodegen/pkg/openapi/openapigenerator.APIOnceTemplate*/ -}}
{{- template "header-singleline" }}

package {{ .Common.Packages.Root }};

import {{ .Common.Packages.Client }}.{{ .Metadata.Name }}Api;
import lombok.AccessLevel;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.composite.CompositeMeterRegistry;

import io.github.primelib.primecodegenlib.java.feign.common.api.AuthMethod;
import io.github.primelib.primecodegenlib.java.feign.common.auth.ApiKeyAuthSpec;
import io.github.primelib.primecodegenlib.java.feign.common.auth.BasicAuthSpec;
import io.github.primelib.primecodegenlib.java.feign.common.auth.BearerAuthSpec;
import io.github.primelib.primecodegenlib.java.feign.common.auth.OAuth2ClientCredentialsAuthSpec;
import io.github.primelib.primecodegenlib.java.feign.common.auth.OAuth2UserCredentialsAuthSpec;
import io.github.primelib.primecodegenlib.java.feign.common.config.FeignModuleSpec;
import io.github.primelib.primecodegenlib.java.feign.common.config.ProxySpec;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;

import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.annotation.processing.Generated;

/**
 * A specification to construct a client instance.
 */
@Data
@EqualsAndHashCode(callSuper = true)
@Accessors(fluent = true)
@NoArgsConstructor(access = AccessLevel.PRIVATE, force = true)
@Generated(value = "io.github.primelib.primecodegen")
public final class {{ .Metadata.Name }}FactorySpec<T> extends FeignModuleSpec<{{ .Metadata.Name }}FactorySpec<T>> {

    /**
     * The name of the backend to use
     */
    @NotNull
    private String backendName = "{{ .Metadata.Name }}";

    /**
     * The API interface to use
     */
    @NotNull
    private Class<T> api;

    /**
     * The api base URL
     */
    @NotNull
    private String baseUrl = "{{ .Common.Endpoints.DefaultEndpoint }}";

    /**
     * The authentication methods to use
     */
    @Nullable
    private List<AuthMethod> auth = new ArrayList<>(5);

    /**
     * MeterRegistry to use for metrics
     */
    @NotNull
    private MeterRegistry meterRegistry = new CompositeMeterRegistry();

    /**
     * the feign log level
     * <p>
     * Defaults to {@code none}.
     * Allowed values are: {@code none}, {@code basic}, {@code headers}, {@code full}
     */
    @NotNull
    private String logLevel = "none";

    /**
     * insecure disables SSL verification
     */
    @NotNull
    private boolean insecure = false;

    /**
     * Constructs a validated implementation of the specification.
     *
     * @param spec the specification to process
     */
    @NotNull
    public {{ .Metadata.Name }}FactorySpec(@NotNull Consumer<{{ .Metadata.Name }}FactorySpec<T>> spec) {
        spec.accept(this);
        validate();
    }

    /**
     * Ensures the configured specification is valid.
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(backendName, "backendName must not be null");
        Objects.requireNonNull(api, "api must not be null");
        Objects.requireNonNull(baseUrl, "baseUrl must not be null");
        if (baseUrl.isEmpty()) {
            throw new IllegalArgumentException("baseUrl must not be empty");
        }
        Objects.requireNonNull(logLevel, "logLevel must not be null");
    }

{{- if .Common.Auth.HasAuthScheme "apikey" }}
    public ApiKeyAuthSpec apiKeyAuth(Consumer<ApiKeyAuthSpec> spec) {
        ApiKeyAuthSpec method = new ApiKeyAuthSpec(spec);
        auth.add(method);
        return method;
    }

{{- end }}
{{- if .Common.Auth.HasAuthScheme "basic" }}
    public BasicAuthSpec basicAuth(Consumer<BasicAuthSpec> spec) {
        BasicAuthSpec method = new BasicAuthSpec(spec);
        auth.add(method);
        return method;
    }

{{- end }}
{{- if .Common.Auth.HasAuthScheme "bearer" }}
    public BearerAuthSpec bearerAuth(Consumer<BearerAuthSpec> spec) {
        BearerAuthSpec method = new BearerAuthSpec(spec);
        auth.add(method);
        return method;
    }

{{- end }}
{{- if .Common.Auth.HasAuthVariant "oauth2ClientCredentialAuth" }}
    public OAuth2ClientCredentialsAuthSpec oauth2ClientCredentialAuth(Consumer<OAuth2ClientCredentialsAuthSpec> spec) {
        OAuth2ClientCredentialsAuthSpec method = new OAuth2ClientCredentialsAuthSpec(spec);
        auth.add(method);
        return method;
    }

{{- end }}
{{- if .Common.Auth.HasAuthVariant "oauth2PasswordAuth" }}
    public OAuth2UserCredentialsAuthSpec oauth2PasswordAuth(Consumer<OAuth2UserCredentialsAuthSpec> spec) {
        OAuth2UserCredentialsAuthSpec method = new OAuth2UserCredentialsAuthSpec(spec);
        auth.add(method);
        return method;
    }

{{- end }}

    @ApiStatus.Internal
    public void applySpec({{ .Metadata.Name }}FactorySpec<?> spec) {
        backendName(spec.backendName());
        baseUrl(spec.baseUrl());
        auth(spec.auth());
        proxy = spec.proxy();
        meterRegistry(spec.meterRegistry());
        logLevel(spec.logLevel());
    }
}
